package conectabase;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import javax.swing.JOptionPane;

public class Queries extends javax.swing.JFrame {

    /**
     * Creates new form Queries
     */
    public Queries() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1. Usuarios que menos usan el sistema.", "2. Ajustadores que más siniestros atienden.", "3. Ajustadores que menos siniestros han atendido.", "4. Lista de todos los ajustadores que están registrados en el sistema.", "5. Lista de los siniestros de un ajustador en particular.", "6. Lista de todos los ajustadores que manejaron un vehículo en un periodo de tiempo determinado.", "7. Lista de las colonias en donde más siniestros ocurren.", "8. Hora del día en donde más siniestros ocurren.", "9. Número de siniestros en un periodo de tiempo determinado.", "10. Nombre del ajustador que manejó un vehículo en un periodo de tiempo determinado.", "11. La última posición de un ajustador en particular.", "12. Lista de todos los vehículos que manejó un ajustador en un periodo de tiempo determinado." }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jComboBox1KeyPressed(evt);
            }
        });

        jButton1.setText("Consultar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Consultas Frecuentes de la base de datos");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, 0, 830, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed


    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        QuerySelected();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyPressed
        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER){            
        QuerySelected();
        }            
    }//GEN-LAST:event_jComboBox1KeyPressed

    void QuerySelected() {
        String query = "";
        String fechaInicial;
        String fechaFinal;
        String FechaHoraInicial;
        String FechaHoraFinal;

        jTextArea1.setText("");
        if (jComboBox1.getSelectedItem() != null) {
            int opt = jComboBox1.getSelectedIndex();
            switch (opt) {
                case 0:
                    query = "SELECT id_ajustador, nombre,ap_paterno,usuario,logins FROM s_usuarios_ajustadores RIGHT JOIN s_ajustadores USING(id_ajustador) having logins = (SELECT logins FROM s_usuarios_ajustadores RIGHT JOIN s_ajustadores USING(id_ajustador)ORDER BY logins DESC LIMIT 1);";
                    break;
                case 1:
                    query = "SELECT id_ajustador, nombre,ap_paterno,COUNT(id_ajustador)AS siniestros_atendidos FROM s_siniestros RIGHT JOIN s_ajustadores USING(id_ajustador) group by (id_ajustador) HAVING siniestros_atendidos = (SELECT COUNT(id_ajustador)AS siniestros_atendidos FROM s_siniestros RIGHT JOIN s_ajustadores USING(id_ajustador) GROUP BY(id_ajustador) ORDER BY siniestros_atendidos DESC LIMIT 1);";
                    break;
                case 2:
                    query = "SELECT id_ajustador, nombre,ap_paterno,COUNT(id_ajustador)AS siniestros_atendidos FROM s_siniestros RIGHT JOIN s_ajustadores USING(id_ajustador)GROUP BY(id_ajustador) having siniestros_atendidos = (SELECT COUNT(id_ajustador)AS siniestros_atendidos FROM s_siniestros RIGHT JOIN s_ajustadores USING(id_ajustador)GROUP BY(id_ajustador)ORDER BY siniestros_atendidos LIMIT 1);";
                    break;
                case 3:
                    query = "SELECT id_ajustador, nombre, ap_paterno, ap_materno FROM s_ajustadores;";
                    break;
                case 4:
                    String nombre = JOptionPane.showInputDialog("Ingrese el nombre del ajustador que desea buscar", "");
                    if (nombre != null) {
                        if (!"".equals(nombre)) {
                            query = "SELECT id_ajustador, nombre, id_siniestro, id_poliza, fecha_hora, calle, estado, delegacion, colonia, num_calle FROM s_siniestros LEFT JOIN s_ajustadores USING(id_ajustador) where nombre = '" + nombre + "';";
                        }
                    }
                    break;
                case 5:
                    fechaInicial = JOptionPane.showInputDialog("Ingrese la fecha inicial del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                    if (!"".equals(fechaInicial)) {
                        if (fechaInicial != null) {
                            fechaFinal = JOptionPane.showInputDialog("Ingrese la fecha final del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                            if (!"".equals(fechaFinal)) {
                                if (fechaFinal != null) {
                                    query = "SELECT id_ajustador, fecha_inicio, fecha_fin FROM s_periodos_autos_ajustadores WHERE fecha_inicio = '" + fechaInicial + "' AND fecha_fin = '" + fechaFinal + "';";
                                }
                            }
                        }
                    }
                    break;
                case 6:
                    query = "SELECT colonia, COUNT(id_siniestro) AS numero_de_siniestros FROM s_siniestros GROUP BY colonia having numero_de_siniestros = (SELECT COUNT(id_siniestro) AS numero_de_siniestros FROM s_siniestros GROUP BY colonia ORDER BY numero_de_siniestros DESC LIMIT 1);";
                    break;
                case 7:
                    query = "SELECT COUNT(HOUR(fecha_hora)) as 'numero de siniestros', HOUR(fecha_hora) as hora from s_siniestros GROUP BY hora HAVING hora BETWEEN 00 AND 23 ORDER BY 'numero de siniestros' DESC LIMIT 1;";
                    break;
                case 8:
                    //
                    FechaHoraInicial = JOptionPane.showInputDialog("Ingrese la fecha y hora incial: (AAAA-MM-DD HH:MM:SS) ", "");
                    if (!"".equals(FechaHoraInicial)) {
                        if (FechaHoraInicial != null) {
                            FechaHoraFinal = JOptionPane.showInputDialog("Ingrese la fecha y hora final: (AAAA-MM-DD HH:MM:SS) ", "");
                            if (!"".equals(FechaHoraFinal)) {
                                if (FechaHoraFinal != null) {
                                    query = "SELECT COUNT(id_siniestro) AS numero_de_siniestros FROM s_siniestros WHERE fecha_hora BETWEEN '" + FechaHoraInicial + "' AND  '" + FechaHoraFinal + "';";
                                }
                            }
                        }
                    }
                    break;
                case 9:
                    fechaInicial = JOptionPane.showInputDialog("Ingrese la fecha inicial del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                    if (!"".equals(fechaInicial)) {
                        if (fechaInicial != null) {
                            fechaFinal = JOptionPane.showInputDialog("Ingrese la fecha final del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                            if (!"".equals(fechaFinal)) {
                                if (fechaFinal != null) {
                                    query = "SELECT nombre,ap_paterno,fecha_inicio,fecha_fin FROM s_periodos_autos_ajustadores RIGH JOIN s_ajustadores USING(id_ajustador)WHERE fecha_inicio >= '" + fechaInicial + "' AND fecha_fin <= '" + fechaFinal + "';";
                                }
                            }
                        }
                    }
                    break;
                case 10:
                    nombre = JOptionPane.showInputDialog("Ingrese el nombre del ajustador que desea buscar", "");
                    if (nombre != null) {
                        if (!"".equals(nombre)) {
                            query = "SELECT nombre, posicion FROM s_ajustadores RIGHT JOIN s_periodos_autos_ajustadores USING(id_ajustador) WHERE nombre = '" + nombre + "';";
                        }
                    }
                    break;
                case 11:
                    nombre = JOptionPane.showInputDialog("Ingrese el nombre del ajustador que desea buscar", "");
                    if (nombre != null) {
                        if (!"".equals(nombre)) {
                            fechaInicial = JOptionPane.showInputDialog("Ingrese la fecha inicial del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                            if (!"".equals(fechaInicial)) {
                                if (fechaInicial != null) {
                                    fechaFinal = JOptionPane.showInputDialog("Ingrese la fecha final del intervalo de tiempo a procesar: (AAAA-MM-DD) ", "");
                                    if (!"".equals(fechaFinal)) {
                                        if (fechaFinal != null) {
                                            query = "SELECT id_vehiculo_ajustadores, id_ajustador, nombre, ap_paterno, ap_materno, fecha_inicio, fecha_fin FROM s_periodos_autos_ajustadores LEFT JOIN s_ajustadores using (id_ajustador) WHERE fecha_inicio >= '" + fechaInicial + "' AND fecha_fin <= '" + fechaFinal + "' AND nombre = '" + nombre + "';";
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
            try (Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/ic16jpm", "root", "root")) {
                Statement stmt = con.createStatement();
                ResultSet rs = stmt.executeQuery(query);
                ResultSetMetaData rsmd = rs.getMetaData();
                int columnsNumber = rsmd.getColumnCount();

                if (!rs.next()) {
                    jTextArea1.append("No hay resultados que mostrar para la consulta.");
                } else {
                    rs.beforeFirst();
                    for (int i = 1; i <= columnsNumber; i++) {
                        jTextArea1.append(rsmd.getColumnName(i));
                        System.out.print(rsmd.getColumnName(i));
                        if (i < 1) {
                            jTextArea1.append(" ");
                            System.out.print(" ");
                        }
                        jTextArea1.append(", ");
                        System.out.print(", ");
                    }
                    jTextArea1.append("\n\n");
                    System.out.println("\n");
                    while (rs.next()) {
                        for (int i = 1; i <= columnsNumber; i++) {
                            if (i > 1) {
                                jTextArea1.append(",  ");
                                System.out.print(",  ");
                            }
                            String columnValue = rs.getString(i);
                            jTextArea1.append(columnValue + " ");
                            System.out.print(columnValue + " ");
                        }
                        jTextArea1.append("\n");
                        System.out.println();
                    }
                }
            } catch (Exception e) {
                String error = e.toString();
                jTextArea1.append(error);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Queries().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
